vars:
  base_url: http://localhost:8080
  base_timeout: 120

testcases:
#APP
  #PING
  - name: /ping
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/ping"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldEqual "ok"

#TENDER
#GET LIST
  #OK (200)
  - name: /tenders RETURN ARRAY
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  - name: /tenders RETURN ARRAY WITH LIMIT
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?limit=1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
          - result.bodyjson ShouldNotBeNil
          - or:
              - result.bodyjson ShouldHaveLength 0
              - result.bodyjson ShouldHaveLength 1
  - name: /tenders RETURN ARRAY WITH OFFSET
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?offset=1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  - name: /tenders RETURN ARRAY WITH TYPE
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?service_type=Delivery"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  #BAD REQUEST (400)
  - name: /tenders LIMIT BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?limit=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders OFFSET BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?offset=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders SERVICE TYPE BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?service_type=bad"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason

#GET MY
  #OK (200)
  - name: /tenders/my RETURN ARRAY
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  - name: /tenders/my RETURN ARRAY WITH LIMIT
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1&limit=1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
          - result.bodyjson ShouldNotBeNil
          - or:
              - result.bodyjson ShouldHaveLength 0
              - result.bodyjson ShouldHaveLength 1
  #BAD REQUEST (400)
  - name: /tenders/my LIMIT BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1&limit=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/my OFFSET BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1&offset=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/my USERNAME MAX LENGTH BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my"
        queries:
          username: "{{.randomString 60}}"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/my BAD USERNAME
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=bad_user"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason

#NEW
  #OK (200)
  - name: /tenders/new CREATE
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson.name ShouldEqual "Новый тестовый тендер"
          - result.bodyjson.description ShouldEqual "ОПИСАНИЕ ТЕНДЕРА"
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson.serviceType ShouldEqual "Delivery"
          - result.bodyjson.version ShouldEqual 1
          - result.bodyjson ShouldContainKey createdAt
  #BAD REQUEST
  - name: /tenders/new WITHOUT name
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT description
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT service_type
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITH INVALID serviceType
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "bad",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT organizationId
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT creatorUsername
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/new BAD USERNAME
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "bad_user"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS
  - name: /tenders/new USER CAN'T CREATE
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user4"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason