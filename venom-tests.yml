vars:
  base_url: http://localhost:8080
  base_timeout: 120

testcases:
#APP
  #PING
  - name: /ping
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/ping"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldEqual "ok"


#TENDER
#GET LIST
  #OK (200)
  - name: /tenders RETURN ARRAY
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  - name: /tenders RETURN ARRAY WITH LIMIT
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?limit=1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
          - result.bodyjson ShouldNotBeNil
          - or:
              - result.bodyjson ShouldHaveLength 0
              - result.bodyjson ShouldHaveLength 1
  - name: /tenders RETURN ARRAY WITH OFFSET
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?offset=1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  - name: /tenders RETURN ARRAY WITH TYPE
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?service_type=Delivery"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  #BAD REQUEST (400)
  - name: /tenders LIMIT BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?limit=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders OFFSET BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?offset=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders SERVICE TYPE BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders?service_type=bad"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason

#GET MY
  #OK (200)
  - name: /tenders/my RETURN ARRAY
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
  - name: /tenders/my RETURN ARRAY WITH LIMIT
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1&limit=1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldBeArray
          - result.bodyjson ShouldNotBeNil
          - or:
              - result.bodyjson ShouldHaveLength 0
              - result.bodyjson ShouldHaveLength 1
  #BAD REQUEST (400)
  - name: /tenders/my LIMIT BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1&limit=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/my OFFSET BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=user1&offset=-1"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/my USERNAME MAX LENGTH BAD REQUEST
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my"
        queries:
          username: "{{.randomString 60}}"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/my BAD USERNAME
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/my?username=bad_user"
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason

#NEW
  #OK (200)
  - name: /tenders/new CREATE
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson.name ShouldEqual "Новый тестовый тендер"
          - result.bodyjson.description ShouldEqual "ОПИСАНИЕ ТЕНДЕРА"
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson.serviceType ShouldEqual "Delivery"
          - result.bodyjson.version ShouldEqual 1
          - result.bodyjson ShouldContainKey createdAt
  #BAD REQUEST
  - name: /tenders/new WITHOUT name
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT description
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT service_type
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITH INVALID serviceType
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "bad",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT organizationId
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "creatorUsername": "user1"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/new WITHOUT creatorUsername
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/new BAD USERNAME
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "bad_user"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /tenders/new USER CAN'T CREATE
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/tenders/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новый тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Delivery",
            "organizationId": "550e8400-e29b-41d4-a716-446655440020",
            "creatorUsername": "user4"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason

#GET STATUS
  #OK (200)
  - name: /tenders/status CREATED
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/14a22160-dcc3-41b0-9813-80860919b306/status?username=user2"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldEqual "Created"
  - name: /tenders/status PUBLISHED
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/1e40faa5-c355-4dfc-bf60-7f3e2774da46/status"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldEqual "Published"
  - name: /tenders/status CLOSED
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/21fff1f2-7ccf-4be1-9406-628a1847587c/status?username=user2"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldEqual "Closed"
  #BAD REQUEST (400)
  - name: /tenders/status EMPTY TENDER ID
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/00000000-0000-0000-0000-000000000000/status?username=user1"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/status INVALID USER
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/14a22160-dcc3-41b0-9813-80860919b306/status?username=bad_user"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /tenders/status NO ACCESS
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/14a22160-dcc3-41b0-9813-80860919b306/status?username=user4"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason
  #NOT FOUND (404)
  - name: /tenders/status TENDER NOT FOUND
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/tenders/10000000-0000-0000-0000-000000000000/status?username=user1"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 404
          - result.bodyjson ShouldContainKey reason

#UPDATE STATUS
  #OK (200)
  - name: /tenders/ UPDATE STATUS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?username=user2&status=Created"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey name
          - result.bodyjson ShouldContainKey description
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson ShouldContainKey serviceType
          - result.bodyjson ShouldContainKey version
          - result.bodyjson ShouldContainKey createdAt
  - name: /tenders/ UPDATE STATUS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?username=user2&status=Published"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey name
          - result.bodyjson ShouldContainKey description
          - result.bodyjson.status ShouldEqual "Published"
          - result.bodyjson ShouldContainKey serviceType
          - result.bodyjson ShouldContainKey version
          - result.bodyjson ShouldContainKey createdAt
  - name: /tenders/ UPDATE STATUS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?username=user2&status=Closed"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey name
          - result.bodyjson ShouldContainKey description
          - result.bodyjson.status ShouldEqual "Closed"
          - result.bodyjson ShouldContainKey serviceType
          - result.bodyjson ShouldContainKey version
          - result.bodyjson ShouldContainKey createdAt
  #BAD REQUEST (400)
  - name: /tenders/ UPDATE STATUS BAD STATUS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?username=user2&status=bad"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/ UPDATE STATUS WITHOUT USERNAME
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?status=Closed"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/ UPDATE STATUS WITH BAD TENDER ID
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/00000000-0000-0000-0000-000000000000/status?username=user2&status=Closed"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/ UPDATE STATUS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?username=bad_user&status=Closed"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /tenders/ UPDATE STATUS USER HAS NO RIGHTS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/ba0c3b96-83c6-4a64-89ec-901b6dbf4399/status?username=user4&status=Closed"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason
  #NOT FOUND (404)
  - name: /tenders/ UPDATE STATUS WITH BAD TENDER ID
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/10000000-0000-0000-0000-000000000000/status?username=user2&status=Closed"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 404
          - result.bodyjson ShouldContainKey reason

#EDIT
  #OK (200)
  - name: /tenders/ EDIT
    steps:
      - type: http
        method: PATCH
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/edit?username=user3"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Обновленный тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Manufacture"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson.name ShouldEqual "Обновленный тестовый тендер"
          - result.bodyjson.description ShouldEqual "ОПИСАНИЕ ТЕНДЕРА"
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson.serviceType ShouldEqual "Manufacture"
          - result.bodyjson.version ShouldNotEqual 1
          - result.bodyjson ShouldContainKey createdAt
  #BAD REQUEST (400)
  - name: /tenders/ EDIT WITHOUT USERNAME
    steps:
      - type: http
        method: PATCH
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/edit"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Обновленный тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Manufacture"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/ EDIT INVALID TENDER ID
    steps:
      - type: http
        method: PATCH
        url: "{{.base_url}}/api/tenders/00000000-0000-0000-0000-000000000000/edit?username=user3"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Обновленный тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Manufacture"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/ EDIT BAD USERNAME
    steps:
      - type: http
        method: PATCH
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/edit?username=bad_user"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Обновленный тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Manufacture"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /tenders/ EDIT WITHOUT USERNAME
    steps:
      - type: http
        method: PATCH
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/edit?username=user4"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Обновленный тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Manufacture"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason
  #NOT FOUND (404)
  - name: /tenders/ EDIT WITHOUT USERNAME
    steps:
      - type: http
        method: PATCH
        url: "{{.base_url}}/api/tenders/10000000-0000-0000-0000-000000000000/edit?username=user3"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Обновленный тестовый тендер",
            "description": "ОПИСАНИЕ ТЕНДЕРА",
            "serviceType": "Manufacture"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 404
          - result.bodyjson ShouldContainKey reason

#ROLLBACK
  #OK (200)
  - name: /tenders/ ROLLBACK
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/rollback/1?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson.name ShouldEqual "ИСТОРИЯ 1"
          - result.bodyjson.description ShouldEqual "ОПИСАНИЕ ТЕНДЕРА"
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson.serviceType ShouldEqual "Manufacture"
          - result.bodyjson.version ShouldNotEqual 1
          - result.bodyjson ShouldContainKey createdAt
  - name: /tenders/ ROLLBACK
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/rollback/2?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson.name ShouldEqual "Обновленный тестовый тендер"
          - result.bodyjson.description ShouldEqual "ОПИСАНИЕ ТЕНДЕРА"
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson.serviceType ShouldEqual "Manufacture"
          - result.bodyjson.version ShouldNotEqual 1
          - result.bodyjson ShouldContainKey createdAt
  #BAD REQUEST (400)
  - name: /tenders/ ROLLBACK INVALID VERSION
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/rollback/0?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/ ROLLBACK WITHOUT USERNAME
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/rollback/1"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /tenders/ ROLLBACK WITH INVALID TENDER ID
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/00000000-0000-0000-0000-000000000000/rollback/1?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /tenders/ ROLLBACK WITH INVALID USERNAME
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/rollback/1?username=bad_user"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /tenders/ ROLLBACK USER HASN'T RIGHTS
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/cd6b7929-514e-4d78-8ba8-2f682fc51126/rollback/1?username=user4"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason
  #NOT FOUND (404)
  - name: /tenders/ ROLLBACK NOT EXISTS TENDER
    steps:
      - type: http
        method: PUT
        url: "{{.base_url}}/api/tenders/10000000-0000-0000-0000-000000000000/rollback/1?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 404
          - result.bodyjson ShouldContainKey reason


#BID
#NEW
  #OK (200)
  - name: /bids/new CREATE
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
            "authorId": "550e8400-e29b-41d4-a716-446655440003"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldNotBeEmpty
          - result.bodyjson.name ShouldEqual "Новое тестовое предложение"
          - result.bodyjson.status ShouldEqual "Created"
          - result.bodyjson.authorType ShouldEqual "Organization"
          - result.bodyjson.authorId ShouldEqual "550e8400-e29b-41d4-a716-446655440003"
          - result.bodyjson.version ShouldEqual 1
          - result.bodyjson ShouldContainKey createdAt
  #BAD REQUEST (400)
  - name: /bids/new CREATE WITHOUT TENDER ID
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
            "authorId": "550e8400-e29b-41d4-a716-446655440003"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /bids/new CREATE WITHOUT NAME
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
            "authorId": "550e8400-e29b-41d4-a716-446655440003"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /bids/new CREATE WITHOUT DESCRIPTION
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "name": "Новое тестовое предложение",
            "authorType": "Organization",
            "authorId": "550e8400-e29b-41d4-a716-446655440003"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /bids/new CREATE WITHOUT AUTHOR TYPE
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorId": "550e8400-e29b-41d4-a716-446655440003"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /bids/new CREATE WITHOUT AUTHOR ID
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /bids/new CREATE NOT EXISTS AUTHOR
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
            "authorId": "10000000-0000-0000-0000-000000000000"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /bids/new CREATE USER HASN'T RIGHTS
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "cd6b7929-514e-4d78-8ba8-2f682fc51126",
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
            "authorId": "550e8400-e29b-41d4-a716-446655440018"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason
  #NOT FOUND (404)
  - name: /bids/new CREATE NOT EXISTS TENDER
    steps:
      - type: http
        method: POST
        url: "{{.base_url}}/api/bids/new"
        headers:
          Content-Type: application/json
        body: >
          {
            "tenderId": "10000000-0000-0000-0000-000000000000",
            "name": "Новое тестовое предложение",
            "description": "ОПИСАНИЕ ПРЕДЛОЖЕНИЯ",
            "authorType": "Organization",
            "authorId": "550e8400-e29b-41d4-a716-446655440003"
          }
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 404
          - result.bodyjson ShouldContainKey reason

#GET MY
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)

#GET TENDER BID LIST
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)

#GET BID STATUS
  #OK (200)
  - name: /bids/status GET
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/bids/47cde712-19bd-4341-bbc0-67d5001c9f96/status?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldEqual "Created"
  #BAD REQUEST (400)
  - name: /bids/status GET WITHOUT USERNAME
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/bids/47cde712-19bd-4341-bbc0-67d5001c9f96/status"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  - name: /bids/status GET WITH INVALID BID_ID
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/bids/00000000-0000-0000-0000-000000000000/status?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldContainKey reason
  #USER NOT FOUND (401)
  - name: /bids/status GET WITH INVALID USERNAME
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/bids/47cde712-19bd-4341-bbc0-67d5001c9f96/status?username=bad_user"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldContainKey reason
  #USER HAS NO RIGHTS (403)
  - name: /bids/status GET USER HASN'T RIGHTS
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/bids/47cde712-19bd-4341-bbc0-67d5001c9f96/status?username=user4"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldContainKey reason
  #NOT FOUND (404)
  - name: /bids/status GET NOT EXISTS TENDER
    steps:
      - type: http
        method: GET
        url: "{{.base_url}}/api/bids/10000000-0000-0000-0000-000000000000/status?username=user3"
        headers:
          Content-Type: application/json
        timeout: "{{.base_timeout}}"
        assertions:
          - result.statuscode ShouldEqual 404
          - result.bodyjson ShouldContainKey reason

#UPDATE BID STATUS
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)

#EDIT BID
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)

#SUBMIT DECISION
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)

#FEEDBACK
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)

#ROLLBACK
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)

#GET AUTHOR REVIEWS
  #OK (200)
  #BAD REQUEST (400)
  #USER NOT FOUND (401)
  #USER HAS NO RIGHTS (403)
  #NOT FOUND (404)